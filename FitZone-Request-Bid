import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "./RequestBead.css";
import logo from "../images/logo.png";

export default function RequestBead() {
  const navigate = useNavigate();
  const [requests, setRequests] = useState([]);
  const [loading, setLoading] = useState(false);

  const [form, setForm] = useState({
    heading: "",
    description: "",
    duration: new Date().toISOString(),
    communication_mode: {
      chat: true,
      video_call: true,
      voice_call: true,
    },
    initial_price: 0,
  });

  // ✅ Fetch Active Requests from Backend
  const fetchRequests = async () => {
    try {
      setLoading(true);
      const response = await fetch("https://07f4b9f7102e.ngrok-free.app/api/get-requests");
      if (!response.ok) throw new Error("Failed to fetch requests");

      const data = await response.json();
      setRequests(data.requests || []);
    } catch (error) {
      console.error("❌ Error fetching requests:", error);
      alert("Failed to load active requests");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchRequests();
  }, []);

  // ✅ API for posting new requests
  const handlePostRequest = async () => {
    if (!form.heading || !form.description || !form.initial_price) {
      alert("Please fill out all required fields!");
      return;
    }

    const newRequest = {
      heading: form.heading,
      description: form.description,
      duration: form.duration,
      communication_mode: form.communication_mode,
      initial_price: form.initial_price,
    };

    try {
      const response = await fetch(
        "https://07f4b9f7102e.ngrok-free.app/api/place-bid",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(newRequest),
        }
      );

      if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
      const data = await response.json();

      console.log("✅ Request posted successfully:", data);
      alert("Request posted successfully!");
      fetchRequests(); // Refresh active requests after posting

      // Reset form
      setForm({
        heading: "",
        description: "",
        duration: new Date().toISOString(),
        communication_mode: {
          chat: true,
          video_call: true,
          voice_call: true,
        },
        initial_price: 0,
      });
    } catch (error) {
      console.error("❌ Error posting request:", error);
      alert("Failed to post request. Please try again later.");
    }
  };

  // ❌ Local-only "Place Bid" (no backend)
  const handlePlaceBid = (req) => {
    console.log("Placing bid for:", req);
    alert(`Bid placed for "${req.heading}" (local only, no API call).`);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      {/* Header */}
      <header className="mb-8 flex flex-col items-center text-center">
        <img src={logo} alt="FitZone Logo" className="h-16 w-auto mb-2 animate-spin-slow" />
        <h1 className="text-3xl font-bold text-purple-700">FitZone Marketplace</h1>
        <p className="text-gray-500">Workout Video Marketplace</p>
      </header>

      <div className="flex gap-8 flex-col lg:flex-row">
        {/* Post Request Form */}
        <div className="flex-1 bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-4 text-purple-600">
            Post Your Workout Request
          </h2>

          <div className="mb-4">
            <label className="block mb-1 font-medium">Heading</label>
            <input
              type="text"
              name="heading"
              value={form.heading}
              onChange={(e) =>
                setForm((prev) => ({ ...prev, heading: e.target.value }))
              }
              placeholder="Enter project or workout heading"
              className="w-full border p-2 rounded"
            />
          </div>

          <div className="mb-4">
            <label className="block mb-1 font-medium">Description</label>
            <textarea
              name="description"
              value={form.description}
              onChange={(e) =>
                setForm((prev) => ({ ...prev, description: e.target.value }))
              }
              placeholder="Describe your workout or project..."
              className="w-full border p-2 rounded"
            />
          </div>

          <div className="mb-4">
            <label className="block mb-1 font-medium">Duration</label>
            <input
              type="datetime-local"
              name="duration"
              value={form.duration.slice(0, 16)}
              onChange={(e) =>
                setForm((prev) => ({ ...prev, duration: e.target.value }))
              }
              className="w-full border p-2 rounded"
            />
          </div>

          <div className="mb-4">
            <label className="block mb-1 font-medium">Communication Mode</label>
            <div className="flex gap-4">
              {["chat", "video_call", "voice_call"].map((mode) => (
                <label key={mode} className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={form.communication_mode[mode]}
                    onChange={(e) =>
                      setForm((prev) => ({
                        ...prev,
                        communication_mode: {
                          ...prev.communication_mode,
                          [mode]: e.target.checked,
                        },
                      }))
                    }
                  />
                  {mode.replace("_", " ").toUpperCase()}
                </label>
              ))}
            </div>
          </div>

          <div className="mb-4">
            <label className="block mb-1 font-medium">Initial Price (₹)</label>
            <input
              type="number"
              name="initial_price"
              value={form.initial_price}
              onChange={(e) =>
                setForm((prev) => ({
                  ...prev,
                  initial_price: parseInt(e.target.value, 10) || 0,
                }))
              }
              className="w-full border p-2 rounded"
            />
          </div>

          <button
            onClick={handlePostRequest}
            className="w-full bg-gradient-to-r from-orange-400 to-purple-600 text-white font-semibold py-2 rounded-lg"
          >
            Post Request
          </button>
        </div>

        {/* Active Requests */}
        <div className="flex-1 space-y-4">
          <h2 className="text-xl font-bold mb-4 flex items-center justify-between">
            Active Requests ({requests.length})
            <button
              onClick={fetchRequests}
              className="text-sm bg-purple-100 hover:bg-purple-200 text-purple-700 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </h2>

          {loading && <p className="text-gray-500">Loading requests...</p>}

          {!loading && requests.length === 0 && (
            <p className="text-gray-500">No active requests yet.</p>
          )}

          {requests.map((req) => (
            <div key={req.id || req._id} className="bg-white p-4 rounded-lg shadow">
              <div className="flex justify-between items-center mb-2">
                <h3 className="font-semibold">{req.heading}</h3>
                <span className="text-purple-600 text-sm">
                  {req.timeAgo || "Recently"}
                </span>
              </div>
              <p className="text-gray-700 mb-2">{req.description}</p>
              <p className="text-gray-500 mb-2">
                <span className="font-medium">Duration:</span>{" "}
                {new Date(req.duration).toLocaleString()}
              </p>

              <p className="text-gray-500 mb-2 font-medium">
                Communication:{" "}
                {req.communication_mode
                  ? Object.entries(req.communication_mode)
                      .filter(([_, val]) => val)
                      .map(([key]) => key.replace("_", " "))
                      .join(", ")
                  : "Not specified"}
              </p>

              <p className="font-bold text-orange-600 mb-2">
                ₹ {req.initial_price?.toLocaleString()}
              </p>

              <button
                className="w-full bg-orange-400 text-white py-2 rounded"
                onClick={() => handlePlaceBid(req)}
              >
                Place Bid
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
